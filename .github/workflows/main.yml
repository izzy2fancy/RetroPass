name: RetroPass Build 

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the build'
        required: true
        default: '1.12.1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    
    env:
      SolutionPath: RetroPass.sln
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never
      SigningCertificate: RetroPassKey.pfx      
      ProjectPath: RetroPass\RetroPass.csproj
      ProjectDirectory: .\RetroPass
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: RetroPass
      PackageOutputBaseName: RetroPass
      Tag: ${{ github.event.inputs.tag }}  # Specify the tag here
      
    
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:            
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2
        
      - name: Generate package name
        run: echo "Package name will be based on tag: $Tag"  # Using the Tag environment variable
        
      # You may pin to the exact commit or the version.
      - uses: dawidd6/action-get-tag@v1.1.0
      
      # Create package name
      - name: GetPackageName
        id: getPackageName
        run: |
          $PackageName = "${{ env.PackageOutputBaseName }}" + "_" + "${{ steps.getTag.outputs.tag }}"          
          echo "::set-output name=PackageName::$PackageName"
          Write-Host "Package Name is $PackageName"
               
      # Decode the Base64 encoded Pfx
      - name: Decode the Pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String
